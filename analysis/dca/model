#!/usr/bin/env python3

"""
Model the effects of Dollar Cost Averaging on a time bounded investment with an
anticipate crash of some sort during the investment period.

Each DCA model is compared against an "all in" model to determine which approach
was more profitable.

DCA assumes equal monthly contributions totaling the full investment amount.
The all-in approach assumes the full investment amount is invested on the first
month and no other contributions are made during the time period.

Both models assume DRIP (Dividend Reinvestment Plan) and receive a monthly
infusion of dividends equal to the typical annualized dividend amount (about
1.75% according to investopedia).

This modeling assumes two intervals during the investment period: pre-crash,
and post-crash. The two intervals are separated by a single month established
as the "crash" month. All possible combinations of crash, pre-crash, and
post-crash are modeled. For the sake of simplicity, the pre and post crash
intervals use a constant market change value.

Given eight possible crash values, five possible pre/post change values, and a
24 month test duration, 4457 models would be generated.
"""

initial_market = 4000
dca_intervals = 24
all_investment = 1000000
dca_investment = all_investment / dca_intervals

dividends = 0.0175 / 12
changes = [-0.12, -0.05, 0, 0.05, 0.12]
crashes = [0, -0.2, -0.25, -0.3, -0.35, -0.4, -0.45, -0.5]
plateaus = [_ for _ in crashes if _ in changes]

"""
If the changes and crashes list overlap by more than one element, the logic to
sort out duplication gets too complex. Too much overlap is also a sign that the
modeling is not sufficiently well thought out.
"""
if len(plateaus) > 1:
    print("ERROR: changes and crashes list overlap by more than one value!")
    exit(1)

num_models = dca_intervals * (len(changes) * len(crashes) * len(changes)) \
                - 2 * (len(changes) * len(crashes) * len(changes) - len(changes) * len(crashes)) \
                - 3 * len(crashes) \
                + 1

#print("Testing %i models." % num_models)

def eval_model(market_model) -> list():
    market = initial_market + initial_market * market_model[0]
    all_shares = all_investment / market
    dca_shares = dca_investment / market

    #print("0, all_shares -> %f, dca_shares -> %f" % (all_shares, dca_shares))

    for month in range(1, dca_intervals):
        market = market + market * market_model[month]

        all_value = all_shares * market
        dca_value = dca_shares * market

        all_drip_shares = (all_value * dividends) / market
        dca_drip_shares = (dca_value * dividends) / market
        dca_new_shares = dca_investment / market

        all_shares = all_shares + all_drip_shares
        dca_shares = dca_shares + dca_drip_shares + dca_new_shares
        #print("%i, all_shares -> %f, dca_shares -> %f" % (month, all_shares, dca_shares))

    if all_shares >= dca_shares:
        print("all")
    else:
        print("dca")

test_model = [0] * 24
plateau_set = set()
for crash_month in range(0, dca_intervals):
    for crash in crashes:

        # We only have post crash months if the crash happened at month 0.
        if crash_month == 0:
            for post_crash in changes:
                if post_crash == crash:
                    plateau_set.add(post_crash)
                    continue

                test_model[crash_month] = crash

                for post_crash_month in range(crash_month + 1, dca_intervals):
                    test_model[post_crash_month] = post_crash

                eval_model(test_model)

        # We only have pre crash months if the crash happened in the last month.
        elif crash_month == dca_intervals - 1:
            for pre_crash in changes:
                if pre_crash == crash:
                    plateau_set.add(pre_crash)
                    continue

                for pre_crash_month in range(0, crash_month):
                    test_model[pre_crash_month] = pre_crash

                test_model[crash_month] = crash

                eval_model(test_model)
        else:
            for pre_crash in changes:
                for post_crash in changes:
                    if pre_crash == crash and post_crash == crash:
                        plateau_set.add(crash)
                        continue

                    for pre_crash_month in range(0, crash_month):
                        test_model[pre_crash_month] = pre_crash

                    test_model[crash_month] = crash

                    for post_crash_month in range(crash_month + 1, dca_intervals):
                        test_model[post_crash_month] = post_crash

                    eval_model(test_model)

# Whenver the change list and the crash list contain the same value, a plateau
# model is created. This model ends up being duplicated 3 * len(crashes) times
# unless we skip plateaus in earlier processing and defer them to the end.
for plateau in plateau_set:
    for month in range(0, dca_intervals):
        test_model[month] = plateau
    eval_model(test_model)
